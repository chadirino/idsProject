// inventory system

package draft;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.undo.AbstractUndoableEdit;

public class InventoryGUI extends JFrame {

    Container cp;
    JMenuBar menuBar;
    JMenu invMenu, purchMenu;
    JMenuItem viewInv, addInv, updateInv, viewPurch, addPurch, updatePurch;
    JPanel pInvList, pPurchList, pInvUpdate, pPurchUpdate, pNewPurch, pNewInv;
    JFormattedTextField txtInvDescription, txtUnitType, txtUOH, txtUnitCost, txtROP, txtUnitCalories;
    JButton btnSaveInv, btnSavePurch, btnCancel;
    JTable tblInvEdit, tblInvNonEdit;
    JScrollPane spInvEdit, spInvNonEdit;
    TableModel nonEditable, editable;
    MenuItemListener MenuListen;

    public InventoryGUI() {
        
        // ======================================================
        //                         data
        // ======================================================

        String[] columnNames = {"#","Name","Unit","QOH","ROP"};
        String[] data[] = {{"101","Chicken","lbs","24","24"},
        {"102","Beef","lbs","30","20"},{"103","Pork","lbs","22","16"},
        {"104","Lamb","lbs","15","14"},{"105","Goat","lbs","18","12"},
        {"201","Rice","lbs","44","18"},{"202","Bread","lbs","14","14"},
        {"203","Pasta","lbs","18","12"},{"301","Whole Milk","gal","16","12"},
        {"302","Cheese","lbs","16","12"},{"303","Yogurt","lbs","20","12"},
        {"304","Butter","lbs","16","18"},{"305","2% Milk","gal","12","8"}};
       
        // ======================================================
        //                        tables
        // ======================================================

        // table models
        editable = new DefaultTableModel(data, columnNames) {};
        nonEditable = new DefaultTableModel(data, columnNames) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        // non-editable table for initial page
        tblInvNonEdit = new JTable(nonEditable);
        
        // editable table for update page
        tblInvEdit = new JTable(editable);

        // put tables inside scroll panes (give them scroll bars)
        spInvNonEdit = new JScrollPane(tblInvNonEdit);
        spInvNonEdit.setPreferredSize(new Dimension(375,200));
        spInvEdit = new JScrollPane(tblInvEdit);
        spInvEdit.setPreferredSize(new Dimension(375,200));

        // ======================================================
        //                          menu
        // ======================================================

        // --------------------- menu items ---------------------

        // menu item listener
        MenuListen = new MenuItemListener();

        // inventory
        viewInv = new JMenuItem("View list of inventory items");
        addInv = new JMenuItem("Add new inventory item");
        updateInv = new JMenuItem("Update existing inventory item");
        
        // purchases
        viewPurch = new JMenuItem("View list of purchases");
        addPurch = new JMenuItem("Add new purchase");
        updatePurch = new JMenuItem("Update existing purchase");
        
        // add listener to menu items
        viewInv.addActionListener(MenuListen);
        addInv.addActionListener(MenuListen);
        updateInv.addActionListener(MenuListen);
        viewPurch.addActionListener(MenuListen);
        addPurch.addActionListener(MenuListen);
        updatePurch.addActionListener(MenuListen);

         // ----------------------- menus ------------------------
        
        // inventory
        invMenu = new JMenu("Inventory");
        invMenu.setMnemonic(KeyEvent.VK_I);
        invMenu.getAccessibleContext().setAccessibleDescription("");
        invMenu.add(viewInv);
        invMenu.add(addInv);
        invMenu.add(updateInv);
        
        // purchases
        purchMenu = new JMenu("Purchases");
        purchMenu.setMnemonic(KeyEvent.VK_P);
        purchMenu.getAccessibleContext().setAccessibleDescription("");
        purchMenu.add(viewPurch);
        purchMenu.add(addPurch);
        purchMenu.add(updatePurch);

        // ---------------------- menu bar ----------------------

        menuBar = new JMenuBar();
        menuBar.add(invMenu);
        menuBar.add(purchMenu);
        
        // ======================================================
        //                         window
        // ======================================================
        
        // content pane
        cp = getContentPane();

        // window listener
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent event) {
                dispose(); 
                new InitialGUI();
            }
        });

        setJMenuBar(menuBar);
        setSize(425,350);
        setLocationRelativeTo(null);
        setVisible(true);

        // open initial page
        openInv(); 
    }

    // main method
    public static void main(String[] args) {
        new InventoryGUI();
    }

    // ======================================================
    //                         panels
    // ======================================================
    
    // inventory list page
    private void openInv() {
        setTitle("Inventory Manager - Inventory List");
        switchPage();
        pInvList = new JPanel();
        pInvList.add(spInvNonEdit);
        cp.add(pInvList);
    }

    // purchases list page
    private void openPurch() {
        setTitle("Inventory Manager - Purchases List");
        switchPage();
        pPurchList = new JPanel();
        // add non-editable purchases table here
        cp.add(pPurchList);
    }

    // new purchase page
    private void openNewPurch() {
        setTitle("New Purchase");
        switchPage();

    }

    // new inventory item page
    private void openNewInv() {
        setTitle("New Inventory Item");
        switchPage();
    }

    // inventory update page
    private void openUpdateInv() {
        setTitle("Inventory Manager - Update Inventory");
        switchPage();
        pInvUpdate = new JPanel();
        pInvUpdate.add(spInvEdit);
        cp.add(pInvUpdate);
    }

    // purchase update page
    private void openUpdatePurch() {
        setTitle("Inventory Manager - Update Purchases");
        switchPage();
        pPurchUpdate = new JPanel();
        // add editable purchases table here
        cp.add(pPurchUpdate);
    }

    // ======================================================
    //                       buttons
    // ======================================================

   
    

    // ======================================================
    //                     event handler
    // ======================================================
    
    // menu items
    class MenuItemListener implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            if (event.getSource() == viewInv) {
                openInv(); 
            } else if (event.getSource() == viewPurch) {
                openPurch(); 
            } else if (event.getSource() == addPurch) {
                openNewPurch();
            } else if (event.getSource() == addInv) {
                openNewInv(); 
            }else if (event.getSource() == updateInv) {
                openUpdateInv(); 
            } else if (event.getSource() == updatePurch) {
                openUpdatePurch();
            } 
        }
    }

    // ======================================================
    //                      misc methods
    // ======================================================

    // method to wipe content pane (for switching panels)
    void switchPage() {
        cp.removeAll();
        cp.revalidate();
        cp.repaint();
    }
}